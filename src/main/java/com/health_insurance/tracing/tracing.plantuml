@startuml

title __TRACING's Class Diagram__\n

  namespace com.health_insurance.tracing {
    class com.health_insurance.tracing.PHMAgendaEventListener {
        ~ dtf : DateTimeFormatter
        ~ log : String
        {static} - LOG : Logger
        {static} - producer : Producer<Long, String>
        + PHMAgendaEventListener()
        + afterMatchFired()
        + afterRuleFlowGroupActivated()
        + afterRuleFlowGroupDeactivated()
        + agendaGroupPopped()
        + agendaGroupPushed()
        + beforeMatchFired()
        + beforeRuleFlowGroupActivated()
        + beforeRuleFlowGroupDeactivated()
        + matchCancelled()
        + matchCreated()
    }
  }
  

  namespace com.health_insurance.tracing {
    class com.health_insurance.tracing.PHMProcessEventListener {
        {static} - LOG : Logger
        + PHMProcessEventListener()
        + afterNodeLeft()
        + afterNodeTriggered()
        + afterProcessCompleted()
        + afterProcessStarted()
        + afterSLAViolated()
        + afterVariableChanged()
        + beforeNodeLeft()
        + beforeNodeTriggered()
        + beforeProcessCompleted()
        + beforeProcessStarted()
        + beforeSLAViolated()
        + beforeVariableChanged()
    }
  }
  

  namespace com.health_insurance.tracing {
    class com.health_insurance.tracing.PHMRuleRuntimeEventListener {
        {static} - LOG : Logger
        + PHMRuleRuntimeEventListener()
        + objectDeleted()
        + objectInserted()
        + objectUpdated()
    }
  }
  

  namespace com.health_insurance.tracing {
    class com.health_insurance.tracing.PHMTaskLifeCycleEventListener {
        {static} - LOG : Logger
        + PHMTaskLifeCycleEventListener()
        + afterTaskActivatedEvent()
        + afterTaskAddedEvent()
        + afterTaskClaimedEvent()
        + afterTaskCompletedEvent()
        + afterTaskDelegatedEvent()
        + afterTaskExitedEvent()
        + afterTaskFailedEvent()
        + afterTaskForwardedEvent()
        + afterTaskNominatedEvent()
        + afterTaskNotificationEvent()
        + afterTaskReassignedEvent()
        + afterTaskReleasedEvent()
        + afterTaskResumedEvent()
        + afterTaskSkippedEvent()
        + afterTaskStartedEvent()
        + afterTaskStoppedEvent()
        + afterTaskSuspendedEvent()
        + afterTaskUpdatedEvent()
        + beforeTaskActivatedEvent()
        + beforeTaskAddedEvent()
        + beforeTaskClaimedEvent()
        + beforeTaskCompletedEvent()
        + beforeTaskDelegatedEvent()
        + beforeTaskExitedEvent()
        + beforeTaskFailedEvent()
        + beforeTaskForwardedEvent()
        + beforeTaskNominatedEvent()
        + beforeTaskNotificationEvent()
        + beforeTaskReassignedEvent()
        + beforeTaskReleasedEvent()
        + beforeTaskResumedEvent()
        + beforeTaskSkippedEvent()
        + beforeTaskStartedEvent()
        + beforeTaskStoppedEvent()
        + beforeTaskSuspendedEvent()
        + beforeTaskUpdatedEvent()
    }
  }
  

  com.health_insurance.tracing.PHMAgendaEventListener .up.|> org.kie.api.event.rule.AgendaEventListener
  com.health_insurance.tracing.PHMProcessEventListener -up-|> org.kie.api.event.process.DefaultProcessEventListener
  com.health_insurance.tracing.PHMRuleRuntimeEventListener .up.|> org.kie.api.event.rule.RuleRuntimeEventListener
  com.health_insurance.tracing.PHMTaskLifeCycleEventListener .up.|> org.kie.api.task.TaskLifeCycleEventListener


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
